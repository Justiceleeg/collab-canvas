%% Collab Canvas Architecture (4-Tier Pattern)
%% Layer 0: UI Components (rendering)
%% Layer 1: UI State (uiStore - menus, toasts, modals)
%% Layer 2: Interaction Handlers (keyboard, shape events)
%% Layer 3: Command Service (all canvas operations)
%% Layer 4: Domain State (canvasStore, selectionStore)
graph LR
    subgraph "User's Browser (Client)"
        direction LR
        User([fa:fa-user User]) -- "Interacts with" --> UI

        subgraph "Next.js Application (App Router)"
            direction TB
            UI("UI Components (Layer 0)<br/><i>Canvas, Toolbar, Cursors<br/>ContextMenu, Toast</i><br/>Konva.js for rendering")
            UIState("UI State Store (Layer 1)<br/><i>uiStore.ts</i><br/>Context menus, toasts, modals")
            Interactions("Interaction Hooks (Layer 2)<br/><i>useKeyboardShortcuts<br/>useShapeInteractions</i>")
            Commands("Command Service (Layer 3)<br/><i>CanvasCommandService</i><br/>All canvas operations")
            DomainHooks("Domain Hooks<br/><i>useCanvas, useFirestore<br/>useLocking, usePresence</i>")
            State("Domain State (Layer 4)<br/><i>canvasStore<br/>selectionStore</i>")
            Services("Service Layer (Data Access)<br/><i>firestore.service.ts<br/>auth.service.ts<br/>presence.service.ts</i>")

            UI -- "User actions" --> Interactions
            UI -- "Reads UI state" --> UIState
            Interactions -- "Executes" --> Commands
            Commands -- "Updates" --> UIState
            Commands -- "Uses" --> DomainHooks
            DomainHooks -- "Updates & reads" --> State
            State -- "Triggers re-render" --> UI
            Commands -- "Calls backend" --> Services
            DomainHooks -- "Calls backend" --> Services
        end
    end

    subgraph "Firebase Backend (Serverless)"
        direction TB
        Auth["<i class='fa-brands fa-firebase'></i> Firebase Authentication<br/>Email/Password & Anonymous"]
        FirestoreDb["<i class='fa-brands fa-firebase'></i> Firestore Database<br/>- canvasObjects Collection<br/><i>Persistent canvas data</i>"]
        RealtimeDb["<i class='fa-brands fa-firebase'></i> Realtime Database<br/>- presence/{userId} Path<br/><i>Ephemeral presence data</i>"]
    end

    subgraph "Deployment Platform"
        direction TB
        Vercel["<i class='fa-solid fa-triangle'></i> Vercel<br/>Hosts & serves Next.js app"]
    end

    subgraph "CI/CD Pipeline"
        direction TB
        GitHub["<i class='fa-brands fa-github'></i> GitHub Repo"]
        GitHub -- "Push to main<br/>(Auto-deploy)" --> Vercel
    end

    %% Data & User Flows
    Services -- "Canvas Objects<br/>(CRUD)" --> FirestoreDb
    Services -- "Presence & Cursors<br/>(High-frequency updates)" --> RealtimeDb
    Services -- "Manages Users" --> Auth
    User -- "Signs In / Authenticates" --> Auth

    %% Real-time Synchronization Loop
    FirestoreDb -- "onSnapshot Listener<br/>(Canvas Updates)" --> Services
    RealtimeDb -- "onValue Listener<br/>(Presence/Cursor Updates)" --> Services

    %% AI Agent Integration (Phase 2)
    subgraph "AI Agent System"
        direction TB
        ChatInput[User via Chat UI]
        AIAgent["<i class='fa-solid fa-robot'></i> AI Agent (LLM)<br/>OpenAI / LangChain"]
        FunctionCalling("Function Calling Schema<br/><i>createShape(), moveShape(), etc.</i>")

        ChatInput -- "Sends natural language prompt" --> AIAgent
        AIAgent -- "Executes tool calls via" --> FunctionCalling
    end

    FunctionCalling -- "Manipulates canvas state via" --> Services

    %% Serving the Application
    Vercel -- "Serves Next.js App to" --> UI